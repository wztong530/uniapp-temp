1.项目框架
  1.1.UI库使用uview
  1.2.按功能模块进行分包开发
  1.3.使用vuex管理状态--根据功能模块使用modules进行状态管理
2.命名及代码规范
  2.1.目录--小写(横杠) aaa[-bbb]
  2.2.页面级组件--小写(横杠) aaa[-bbb].vue
  2.3.自定义组件--大驼峰 AaaBbb.vue
  2.4.公共组件--大驼峰(以T开头) TAaaBbb.vue
  2.5.js文件/css文件--小写(横杠) aaa[-bbb].js aaa[-bbb].scss
  2.6.样式
    2.6.1.页面样式需使用scoped私有化
    2.6.2.语义化命名,小写(下划线) .aaa[_bbb[_ccc]]
    2.6.3.附加样式以两边下划线命名 ._active_
    2.6.4.公共组件样式以t-开头,且去私有化(无需scoped,便于部分页面内微调组件样式) .t-aaa[_bbb[_ccc]]
    2.6.5.公共主题样式以t-开头,公共变量以$t-开头,小写(横杠) $t-text-color: #303133;
  2.7.页面/组件内
    2.7.1.大部分命名均以小驼峰形式(变量名/方法名) aaaBbbCcc
    2.7.2.计算属性以下划线开头 _aaaBbb
    2.7.3.使用vuex管理尽量以map形式 mapState...
    2.7.4.尽量语义化命名,对于是否类的变量,请以is开头 isUsed
    2.7.5.若页面内需引入相关的自定义组件,请在页面文件夹内创建src目录,以存放自定义组件
3.目录说明
  3.1.apis--接口目录
  3.2.common--通用目录
    3.2.1.http--请求封装request.js
    3.2.2.utils--工具类
    3.2.3.permission--授权
    3.2.4.login--登录
    ...
  3.3.components--公共组件(组件以文件夹区分)
  3.4.config--配置目录
  3.5.pages--页面目录(按模块划分,后续需分包也直接在这里改动)
  3.6.plugins--引用的插件
  3.7.static--静态目录
  3.8.store--vuex全局状态管理
  3.9.styles--样式相关目录
    3.9.1.themes--主题
      3.9.1.1.default--默认主题(目录)
        3.9.1.1.1.index.scss--通用样式文件(主文件)
        3.9.1.1.2.var.scss--样式变量文件
    3.9.2.iconfonts--字体图标
  3.10.uview-ui--UI库